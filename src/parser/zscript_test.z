////////////////////////////////////////////////////////////////
// Create a new quest and load this script in it to test various aspects of
// ZScript. It should compile cleanly and report no errors when the quest is
// run.

import "std.zh"
import "string.zh"

// Global Variable Declaration.
int global_var_1;
int global_var_2 = 10;
// Global String Declaration.

// Global Array w/ constant size
const int S1 = 10;
const int S2 = 20;
int global_const_size_1[10 * 10];
int global_const_size_2[S1];
int global_const_size_3[S1 * S2];

////////////////////////////////////////////////////////////////

// Globals for test_Arrays()
int test_Arrays_g1[5];
int test_Arrays_g2[] = {1, 2, 3};
int test_Arrays_g3[5] = {1, 2, 3};

// Globals for test_Constants()
const int GLOBAL = 100;

// Globals for test_Strings()
int test_Strings_g1[5] = "xyz";
int test_Strings_g2[] = "xyz";
//int test_Strings_g3 = "xyz";

// Globals for test_Variables()
int test_Variables_g1;
int test_Variables_g2 = 10;
int test_Variables_g3 = test_Variables_g2 * 5;

////////////////////////////////////////////////////////////////

int error_count;
int test_count = 0;
int group_name;
int group_count = 0;

// Init Script.
global script Init {

    // Run function.
	void run() {
		// Start
		printf("////////////////////////////////////////////////////////////////\n");
		printf("Syntax Test:\n");
		test_Arrays();
		test_ArrayCasts();
		test_BuiltIns();
		test_Constants();
		test_Operations();
		test_Strings();
		test_Variables();

		if (error_count > 0)
			printf("Failure: %d errors / %d tests.\n", error_count, test_count);
		else
			printf("Success: Passed %d tests.\n",  test_count);

		printf("Syntax Test Done.\n");
		printf("////////////////////////////////////////////////////////////////\n");
	}

	// Secondary functions.
	void test(int result) {
		++test_count;
		++group_count;
		if (!result)
		{
			int strue = "true";
			int sfalse = "false";
			printf("  Failed Test: %s (%d)\n", group_name, group_count);
			printf("    Expected: true\n    Result: %d\n", result);
			++error_count;
		}
	}

	void test(int expected, int result) {
		++test_count;
		++group_count;
		if (expected != result)
		{
			printf("  Failed Test: %s (%d)\n", group_name, group_count);
			printf("    Expected: %d\n    Result: %d\n", expected, result);
			++error_count;
		}
	}

	void test(bool expected, bool result) {
		++test_count;
		++group_count;
		if (expected != result)
		{
			int strue = "true";
			int sfalse = "false";
			printf("  Failed Test: %s (%d)\n", group_name, group_count);
			printf("    Expected: %s\n    Result: %s\n",
				   Cond(expected, strue, sfalse),
				   Cond(result, strue, sfalse));
			++error_count;
		}
	}

	void test_group(int name) {
		group_name = name;
		group_count = 0;
	}

	void test_BuiltIns() {
		test_group("Read/Write Bulitin Variable");
		Link->Dir = DIR_LEFT;
		test(DIR_LEFT, Link->Dir);

		test_group("Increment/Decrement Bulitin Variable");
		test(DIR_RIGHT, ++Link->Dir);
		test(DIR_LEFT, --Link->Dir);
		test(DIR_LEFT, Link->Dir++);
		test(DIR_RIGHT, Link->Dir--);
		test(DIR_LEFT, Link->Dir);

		test_group("Shortuct Assign Builtin Variable");
		Link->Dir += 1;
		test(DIR_RIGHT, Link->Dir);
		Link->Dir -= 1;
		test(DIR_LEFT, Link->Dir);

		test_group("Read/Write Bulitin Array");
		Link->Misc[5] = 10;
		test(10, Link->Misc[5]);

		test_group("Increment/Decrement Bulitin Array");
		test(11, ++Link->Misc[5]);
		test(10, --Link->Misc[5]);
		test(10, Link->Misc[5]++);
		test(11, Link->Misc[5]--);
		test(10, Link->Misc[5]);

		test_group("Shortcut Assignment Builtin Array");
		Link->Misc[5] += 10;
		test(20, Link->Misc[5]);
		Link->Misc[5] -= 10;
		test(10, Link->Misc[5]);

		test_group("Call Builtin Function");
		test(0, Screen->NumItems());
	}

	void test_Arrays() {
		// Global Array Creation.
		test_group("Global Array Creation");
		test(test_Arrays_g1);
		test(test_Arrays_g2);
		test(test_Arrays_g3);

		// Global Array Size.
		test_group("Global Array Size");
		test(5, SizeOfArray(test_Arrays_g1));
		test(3, SizeOfArray(test_Arrays_g2));
		test(5, SizeOfArray(test_Arrays_g3));

		// Global Array Initialization & Reading.
		test_group("Global Array Initialization & Reading");
		test(0, test_Arrays_g1[0]);
		test(0, test_Arrays_g1[1]);
		test(0, test_Arrays_g1[2]);
		test(0, test_Arrays_g1[3]);
		test(0, test_Arrays_g1[4]);
		test(1, test_Arrays_g2[0]);
		test(2, test_Arrays_g2[1]);
		test(3, test_Arrays_g2[2]);
		test(1, test_Arrays_g3[0]);
		test(2, test_Arrays_g3[1]);
		test(3, test_Arrays_g3[2]);
		test(0, test_Arrays_g3[3]);
		test(0, test_Arrays_g3[4]);

		// Global Array Write/Read.
		test_group("Global Array Write/Read");
		test_Arrays_g1[2] = 100;
		test(100, test_Arrays_g1[2]);

		int test_Arrays_l1[5];
		int test_Arrays_l2[] = {1, 2, 3};
		int test_Arrays_l3[5] = {1, 2, 3};

		// Local Array Creation.
		test_group("Local Array Creation");
		test(test_Arrays_l1);
		test(test_Arrays_l2);
		test(test_Arrays_l3);

		// Local Array Size.
		test_group("Local Array Size");
		test(5, SizeOfArray(test_Arrays_l1));
		test(3, SizeOfArray(test_Arrays_l2));
		test(5, SizeOfArray(test_Arrays_l3));

		// Local Array Initialization & Reading.
		test_group("Local Array Initialization & Reading");
		test(0, test_Arrays_l1[0]);
		test(0, test_Arrays_l1[1]);
		test(0, test_Arrays_l1[2]);
		test(0, test_Arrays_l1[3]);
		test(0, test_Arrays_l1[4]);
		test(1, test_Arrays_l2[0]);
		test(2, test_Arrays_l2[1]);
		test(3, test_Arrays_l2[2]);
		test(1, test_Arrays_l3[0]);
		test(2, test_Arrays_l3[1]);
		test(3, test_Arrays_l3[2]);
		test(0, test_Arrays_l3[3]);
		test(0, test_Arrays_l3[4]);

		// Local Array Write/Read.
		test_group("Local Array Write/Read");
		test_Arrays_l1[2] = 100;
		test(100, test_Arrays_l1[2]);
	}

	void test_ArrayCasts() {
		test_group("Cast between int[] and int");
		int a[] = {100};
		int b = a;
		test(100, b[0]);
		a = b[0];
		test(100, a);

		test_group("Assignment between arrays");
		int c[] = {0};
		int d[] = {5};
		c[0] = d[0];
		test(5, c[0]);
	}

	void test_Constants() {
		test_group("Global Constant");
		test(100, GLOBAL);
	}

	void test_Operations() {
		test_group("Math Operations");
		int val = 100;
		test(-100, -val);
		test(-1, ~0);
		test(101, ++val);
		test(100, --val);
		test(100, val++);
		test(101, val--);
		test(150, val + 50);
		test(50, val - 50);
		test(300, val * 3);
		test(10, val / 10);
		test(4, val % 32);
		test(7, 255 & 7);
		test(3, 1 | 2);
		test(1, 3 ^ 2);
		test(4, 1 << 2);
		test(1, 4 >> 2);

		test_group("Math Comparisons");
		test(false, 0 > 0);
		test(true, 0 >= 0);
		test(false, 0 < 0);
 		test(true, 0 <= 0);
 		test(true, 0 == 0);
 		test(false, 0 != 0);
		test(true, 10 > 0);
		test(true, 10 >= 0);
		test(false, 10 < 0);
 		test(false, 10 <= 0);
 		test(false, 10 == 0);
 		test(true, 10 != 0);

		test_group("Boolean Operations");
		test(true, true && true);
		test(false, false && true);
		test(false, true && false);
		test(false, false && false);
		test(true, true || true);
		test(true, false || true);
		test(true, true || false);
		test(false, false || false);
	}
	
	void test_Strings() {
		printf("TODO Fix G3\n");
		
		test_group("Global String Creation");
		test(test_Strings_g1);
		test(test_Strings_g2);
		//test(test_Strings_g3);

		test_group("Global String Size");
		test(5, SizeOfArray(test_Strings_g1));
		test(4, SizeOfArray(test_Strings_g2));
		//test(4, SizeOfArray(test_Strings_g3));

		test_group("Global String Initialization & Reading");
		test('x', test_Strings_g1[0]);
		test('y', test_Strings_g1[1]);
		test('z', test_Strings_g1[2]);
		test(0, test_Strings_g1[3]);
		test(0, test_Strings_g1[4]);
		test('x', test_Strings_g2[0]);
		test('y', test_Strings_g2[1]);
		test('z', test_Strings_g2[2]);
		test(0, test_Strings_g2[3]);
		// test('x', test_Strings_g3[0]);
		// test('y', test_Strings_g3[1]);
		// test('z', test_Strings_g3[2]);
		// test(0, test_Strings_g3[3]);

		int test_Strings_l1[5] = "xyz";
		int test_Strings_l2[] = "xyz";
		int test_Strings_l3 = "xyz";

		test_group("Local String Creation");
		test(test_Strings_l1);
		test(test_Strings_l2);
		test(test_Strings_l3);

		test_group("Local String Size");
		test(5, SizeOfArray(test_Strings_l1));
		test(4, SizeOfArray(test_Strings_l2));
		test(4, SizeOfArray(test_Strings_l3));

		test_group("Local String Initialization & Reading");
		test('x', test_Strings_l1[0]);
		test('y', test_Strings_l1[1]);
		test('z', test_Strings_l1[2]);
		test(0, test_Strings_l1[3]);
		test(0, test_Strings_l1[4]);
		test('x', test_Strings_l2[0]);
		test('y', test_Strings_l2[1]);
		test('z', test_Strings_l2[2]);
		test(0, test_Strings_l2[3]);
		test('x', test_Strings_l3[0]);
		test('y', test_Strings_l3[1]);
		test('z', test_Strings_l3[2]);
		test(0, test_Strings_l3[3]);
	}

	void test_Variables() {
		test_group("Global Variable Initialization & Reading");
		test(0, test_Variables_g1);
		test(10, test_Variables_g2);
		test(50, test_Variables_g3);

		test_group("Global Variable Write/Read");
		test_Variables_g1 = 50;
		test_Variables_g2 = test_Variables_g1;
		test(50, test_Variables_g1);
		test(50, test_Variables_g2);

		int test_Variables_l1;
		int test_Variables_l2 = 10;
		int test_Variables_l3 = test_Variables_l2 * 5;

		test_group("Local Variable Initialization & Reading");
		test(0, test_Variables_l1);
		test(10, test_Variables_l2);
		test(50, test_Variables_l3);

		test_group("Local Variable Write/Read");
		test_Variables_l1 = 50;
		test_Variables_l2 = test_Variables_l1;
		test(50, test_Variables_l1);
		test(50, test_Variables_l2);
	}
}

item script ItemScript {
	void run() {
		// Test for this being correct type.
		itemdata a = this;
	}
}

ffc script FFCScript {
	void run() {
		// Test for this being correct type.
		ffc a = this;
	}
}

