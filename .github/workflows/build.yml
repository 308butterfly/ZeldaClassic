on:
  workflow_call:
    inputs:
      runs-on:
        type: string
      arch:
        type: string
      compiler:
        type: string
        required: false
      config:
        type: string
        default: "Release"
      cache:
        type: boolean
        default: true
    outputs:
      build-artifact-name:
        description: "The name of the artifact that should be downloaded by the caller workflow"
        value: build-${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}

env:
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: 400M
  CCACHE_SLOPPINESS: time_macros
  TARGET: zelda zquest zscript zlauncher

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Install dependencies.
      - name: git clone
        uses: actions/checkout@v3

      - if: ${{ contains(inputs.runs-on, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ inputs.arch }}

      - if: ${{ contains(inputs.runs-on, 'windows') }}
        name: Install Dependencies
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install .github/dependencies.config -y

      - if: ${{ contains(inputs.runs-on, 'ubuntu') }}
        run: sudo apt-get install ccache ninja-build build-essential gcc-multilib g++-multilib libx11-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev libxcursor1 libasound2-dev libgtk-3-dev flex bison

      - if: ${{ contains(inputs.runs-on, 'mac') }}
        run: brew install ninja dylibbundler create-dmg ccache

      - if: ${{ contains(inputs.runs-on, 'mac') }}
        name: Build and install Bison
        run: |
          wget http://ftp.gnu.org/gnu/bison/bison-3.6.tar.gz
          tar -zxvf bison-3.6.tar.gz
          cd bison-3.6
          ./configure
          make
          sudo make install

      # Setup build cache via ccache.
      - name: ccache cache files
        if: inputs.cache
        uses: actions/cache@v3
        with:
          path: .ccache
          key: ${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}-ccache-${{ github.run_id }}
          restore-keys: ${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}-
      - if: ${{ !inputs.cache }}
        run: echo "CCACHE_DISABLE=1" >> "$GITHUB_ENV"

      # Configure build.
      - if: inputs.compiler == 'clang'
        run: |
          echo "CC=clang" >> "$GITHUB_ENV"
          echo "CXX=clang++" >> "$GITHUB_ENV"
      - if: inputs.compiler == 'gcc'
        run: |
          echo "CC=gcc" >> "$GITHUB_ENV"
          echo "CXX=g++" >> "$GITHUB_ENV"
      - name: Set environment variables
        uses: knicknic/os-specific-run@v1.0.3
        with:
          windows: |
            chcp 65001
            echo ("BUILD_FOLDER=.") >> $env:GITHUB_ENV
          macos: echo "BUILD_FOLDER=build" >> "$GITHUB_ENV"
          linux: echo "BUILD_FOLDER=build" >> "$GITHUB_ENV"
      # Coverage builds only need zelda.
      - name: Set environment variables
        if: inputs.config == 'Coverage'
        run: echo "TARGET=zelda" >> "$GITHUB_ENV"
      - run: cp src/metadata/*.h.sig src/metadata/sigs/
      - name: Configure build
        run: >
          cmake -S . -B ${{ env.BUILD_FOLDER }} -G 'Ninja Multi-Config'
          -DCMAKE_WIN32_EXECUTABLE=1
          -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - run: ccache -z
      - run: cmake --build ${{ env.BUILD_FOLDER }} --config ${{ inputs.config }} --target ${{ env.TARGET }} -j 4 -- -k 0
      - run: ccache -s

      # Package.
      - name: Package
        if: inputs.config != 'Coverage'
        uses: knicknic/os-specific-run@v1.0.3
        with:
          # TODO: windows currently only works for Release config
          windows: |
            cd output/_auto
            ./buildpack.bat N
            echo ("PACKAGE_FOLDER=output/_auto/buildpack") >> $env:GITHUB_ENV
          macos: |
            cd output/_auto
            ./buildpack_osx.sh ../../build/${{ inputs.config }}
            echo "PACKAGE_FOLDER=output/_auto/zelda-classic-mac" >> "$GITHUB_ENV"
          linux: |
            cd output/_auto
            ./buildpack.sh ../../build/${{ inputs.config }}
            cd buildpack
            tar czpvf buildpack.tgz * --preserve-permissions
            echo "PACKAGE_FOLDER=output/_auto/buildpack/buildpack.tgz" >> "$GITHUB_ENV"
      # Coverage builds need the entire build folder.
      - name: Package
        if: inputs.config == 'Coverage'
        run: |
          cd output/_auto
          ./buildpack.sh ../../build/Coverage
          cp -r buildpack/* ../../build/Coverage
          cd ../../build
          tar czpvf build.tgz * --preserve-permissions
          echo "PACKAGE_FOLDER=build/build.tgz" >> "$GITHUB_ENV"

      # Make build result available to other jobs.
      - uses: actions/upload-artifact@v3
        with:
          name: build-${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}
          path: ${{ env.PACKAGE_FOLDER }}
