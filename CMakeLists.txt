cmake_minimum_required(VERSION 3.5)
set(CMAKE_CONFIGURATION_TYPES Debug Release CACHE TYPE INTERNAL FORCE)
project (ZeldaClassic)

set(USE_PCH FALSE CACHE BOOL "Use precompiled headers")
set(UNITY_BUILD FALSE CACHE BOOL "Unity build")

if(UNIX AND NOT APPLE)
	set(LINUX TRUE)
endif()

function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
  set(files ${${SOURCE_VARIABLE_NAME}})
  # Generate a unique filename for the unity build translation unit
  set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)
  # Exclude all translation units from compilation
  set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)
  # Open the ub file
  FILE(WRITE ${unit_build_file} "// Unity Build generated by CMake\n")
  FILE(APPEND ${unit_build_file} "#include \"${CMAKE_SOURCE_DIR}/src/precompiled.h\"\n")
  # Add include statement for each translation unit
  foreach(source_file ${files} )
    FILE( APPEND ${unit_build_file} "#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n")
  endforeach(source_file)
  # Complement list of translation units with the name of ub
  set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${unit_build_file} PARENT_SCOPE)    
endfunction(enable_unity_build)

#############################################################
# Header and source file lists
#############################################################

include_directories(./allegro/include)
include_directories(./include/lpng1212)
include_directories(./include/zlib123)
include_directories(./include/loadpng)
include_directories(./include/jpgalleg-2.5)
include_directories(./include/dumb)
include_directories(./include/alogg)
include_directories(./include/almp3)
include_directories(./include/gme)

set(ZCSOUNDSOURCES
	src/zcmusic.cpp 
	src/zcmusicd.cpp
)

set(ROMVIEW_GUI_SOURCES
	src/editbox.cpp 
	src/EditboxModel.cpp 
	src/EditboxView.cpp 
	src/gui.cpp 
	src/jwinfsel.cpp 
#	src/load_gif.cpp 	
	src/tab_ctl.cpp 
	src/zqscale.cpp 
	src/zsys.cpp
)

set(ROMVIEWEXTRASOURCES
#	src/save_gif.cpp 
	src/jwin.cpp 
	src/romview.cpp 	
)

set(ZC_GUI_SOURCES
	src/zsys.cpp
	src/aglogo.cpp
	src/colors.cpp
	src/debug.cpp
	src/decorations.cpp
	src/editbox.cpp
	src/EditboxModel.cpp
	src/EditboxView.cpp
	src/ending.cpp
	src/matrix.cpp
	src/pal.cpp
	src/jwinfsel.cpp
	src/tab_ctl.cpp
	src/title.cpp
	src/zc_custom.cpp
)

set(ZELDAEXTRASOURCES
 	src/jwin.cpp
)

set(ZC_CORE_SOURCES
	src/zscriptversion.cpp
	src/ffscript.cpp
	src/gamedata.cpp
	src/zelda.cpp
	src/defdata.cpp
	src/qst.cpp
	src/zc_init.cpp
	src/zc_items.cpp
	src/init.cpp
	src/win32.cpp
)

set(ZC_SPRITE_SOURCES
	src/zc_sprite.cpp
	src/guys.cpp
	src/weapons.cpp
	src/link.cpp
	src/particles.cpp
	src/items.cpp
	src/sprite.cpp
	src/tiles.cpp
	src/maps.cpp
	src/script_drawing.cpp
)

set(ZC_SUBSCREEN_SOURCES
	src/subscr.cpp
	src/zc_subscr.cpp
	src/md5.cpp
	src/midi.cpp
	src/gui.cpp
	src/zc_sys.cpp
)

set(ZQ_CORE_SOURCES
	src/colors.cpp
	src/defdata.cpp
	src/editbox.cpp
	src/EditboxModel.cpp
	src/EditboxView.cpp
	src/gamedata.cpp
	src/midi.cpp
	src/md5.cpp
	src/particles.cpp
	src/qst.cpp
	src/save_gif.cpp
	src/sprite.cpp
	src/subscr.cpp
	src/zc_custom.cpp
	src/init.cpp
)

set(ZQ_GUI_SOURCES
	src/zq_class.cpp
	src/zq_cset.cpp
	src/zq_custom.cpp
	src/zq_doors.cpp
	src/zq_files.cpp
	src/zq_init.cpp
	src/zq_items.cpp
	src/zq_misc.cpp	
	src/zq_sprite.cpp
	src/zq_subscr.cpp
	src/zq_strings.cpp
	src/zq_tiles.cpp
	src/zqscale.cpp
	src/zsys.cpp
)

set(ZQ_MISC_SOURCES
	src/items.cpp
	src/questReport.cpp
	src/ffasm.cpp
	src/zquest.cpp
	src/gui.cpp
	src/jwinfsel.cpp
	src/tab_ctl.cpp
	src/tiles.cpp
	src/load_gif.cpp
	src/win32.cpp
)

set(ZQUESTEXTRASOURCES
	src/zq_rules.cpp
	src/jwin.cpp
)

#############################################################
# Build the ZScript parser
#############################################################

find_package(BISON QUIET)
find_package(FLEX QUIET)

if(${BISON_FOUND} AND ${FLEX_FOUND})
	if(MSVC)
		set(FLEXFLAGS "--wincompat")
	endif()
	FLEX_TARGET(ZScriptLexer ${CMAKE_SOURCE_DIR}/src/parser/ffscript.lpp ${CMAKE_SOURCE_DIR}/src/parser/lex.yy.cpp COMPILE_FLAGS ${FLEXFLAGS})
	BISON_TARGET(ZScriptParser ${CMAKE_SOURCE_DIR}/src/parser/ffscript.ypp ${CMAKE_SOURCE_DIR}/src/parser/y.tab.cpp)
	add_flex_bison_dependency(ZScriptLexer ZScriptParser)	
	set(ZSCRIPTSOURCES
		src/parser/AST.cpp 
		src/parser/BuildVisitors.cpp 
		src/parser/ByteCode.cpp 
		src/parser/DataStructs.cpp 
		src/parser/GlobalSymbols.cpp 
		src/parser/ParseError.cpp 
		src/parser/ScriptParser.cpp 
		src/parser/SymbolVisitors.cpp 
		src/parser/TypeChecker.cpp 
		src/parser/UtilVisitors.cpp 		
	)
else()
	message(WARNING "Flex and Bison not found. ZQuest will be compiled without the ZScript parser.")
	set(ZSCRIPTSOURCES src/parser/NoScriptParser.cpp)
endif()


#############################################################
# Global settings for the different platforms
#############################################################

if(MSVC)
	set(ALLEGROLIB "$<$<CONFIG:DEBUG>:${CMAKE_SOURCE_DIR}/libs/win32dbg/alld_crt.lib>" 
				   "$<$<CONFIG:RELEASE>:${CMAKE_SOURCE_DIR}/libs/win32/alleg_crt.lib>")
	
	add_definitions(-DALLEGRO_MSVC)
	
	set(IMAGELIBS "$<$<CONFIG:DEBUG>:${CMAKE_SOURCE_DIR}/libs/win32dbg/al_gif.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/libpng.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/zlibd.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/loadpng.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/libjpgal.lib>"
	              "$<$<CONFIG:RELEASE>:${CMAKE_SOURCE_DIR}/libs/win32/al_gif.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/libpng.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/zlib.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/loadpng.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/libjpgal.lib>")
	
	set(SOUNDLIBS "$<$<CONFIG:DEBUG>:${CMAKE_SOURCE_DIR}/libs/win32dbg/aldmd.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/almp3.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/alogg.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/dumbd.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/gme.lib>"
	              "$<$<CONFIG:RELEASE>:${CMAKE_SOURCE_DIR}/libs/win32/aldmb.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/almp3.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/alogg.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/dumb.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/gme.lib>")

	if(MSVC_VERSION GREATER 1500) 
		add_definitions(-DALLEGRO_HAVE_STDINT_H)
	endif()
		
	add_compile_options("$<$<CONFIG:DEBUG>:/MTd>")
	add_compile_options("$<$<CONFIG:RELEASE>:/MT>")
		
	# REQUIRED or else MSVC throws internal compiler error(!)
	add_compile_options("$<$<CONFIG:RELEASE>:/fp:fast>")
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:LIBCD /SUBSYSTEM:WINDOWS /DEBUG")

	if(USE_PCH)
		set(ZCPrecompiledBinary "${CMAKE_CURRENT_BINARY_DIR}/zcprecompiled.pch")
		set(ZQPrecompiledBinary "${CMAKE_CURRENT_BINARY_DIR}/zqprecompiled.pch")
		set_source_files_properties(src/precompiledzc.cpp PROPERTIES COMPILE_FLAGS "/Ycprecompiled.h /Fp\"${ZCPrecompiledBinary}\"" OBJECT_OUTPUTS "${ZCPrecompiledBinary}")
		set_source_files_properties(src/precompiledzq.cpp PROPERTIES COMPILE_FLAGS "/Ycprecompiled.h /Fp\"${ZQPrecompiledBinary}\"" OBJECT_OUTPUTS "${ZQPrecompiledBinary}")
		list(APPEND ZELDAEXTRASOURCES src/precompiledzc.cpp)
		list(APPEND ZQUESTEXTRASOURCES src/precompiledzq.cpp)
	endif()
elseif(LINUX)
	link_directories(/usr/lib/i386-linux-gnu)
	link_directories(./libs/linux)
	set(ALLEGROLIB alleg)
	add_definitions(-DALLEGRO_UNIX)
	execute_process(COMMAND "${CMAKE_SOURCE_DIR}/allegro/configure --enable-static=yes --enable-shared=no --enable-ossdigi=no --enable-ossmidi=no --enable-esddigi=no --enable-artsdigi=no --enable-sgialdigi=no --enable-jackdigi=no --enable-xwin-dga2=no --enable-vga=no --enable-svgalib=no" WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/allegro")
	
	set(IMAGELIBS ldpng jpgal png z)
	set(SOUNDLIBS aldmb almp3 alogg dumb gme asound)
	set(X11_LIBRARIES X11 Xext Xcursor Xxf86vm pthread Xpm)
	
	add_compile_options("-m32")
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
	SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m32")
endif()

if(MSVC AND (MSVC_VERSION GREATER 1600))
	set(ZCSOUNDLIBSEXTRA legacy_stdio_definitions)
endif()
add_library(zcsound SHARED ${ZCSOUNDSOURCES})
target_link_libraries(zcsound ${ALLEGROLIB} ${SOUNDLIBS} ${ZCSOUNDLIBSEXTRA})



if(MSVC)
	list(APPEND ROMVIEWEXTRASOURCES rv_icon.rc)
elseif(LINUX)
	list(APPEND ROMVIEWEXTRASOURCES rv_icon.c)
	set(ROMVIEWLIBSEXTRA ${X11_LIBRARIES})
endif()

if(UNITY_BUILD)
	enable_unity_build(RomviewGuiModule ROMVIEW_GUI_SOURCES)
endif()
	
add_executable(romview ${ROMVIEW_GUI_SOURCES} ${ROMVIEWEXTRASOURCES})

target_link_libraries(romview ${ALLEGROLIB} ${IMAGELIBS} ${SOUNDLIBS} ${ROMVIEWLIBSEXTRA})


if(MSVC)
	list(APPEND ZELDAEXTRASOURCES zc_icon.rc)
elseif(LINUX)
	list(APPEND ZELDAEXTRASOURCES zc_icon.c src/single_instance_unix.cpp)
	set(ZELDALIBSEXTRA ${X11_LIBRARIES})
endif()

if(UNITY_BUILD)
	enable_unity_build(ZCGuiModule ZC_GUI_SOURCES)
	enable_unity_build(ZCCoreModule ZC_CORE_SOURCES)
	enable_unity_build(ZCSpriteModule ZC_SPRITE_SOURCES)
	enable_unity_build(ZCSubscreenModule ZC_SUBSCREEN_SOURCES)
endif()

add_executable(zelda ${ZC_GUI_SOURCES} ${ZC_CORE_SOURCES} ${ZC_SPRITE_SOURCES} ${ZC_SUBSCREEN_SOURCES} ${ZELDAEXTRASOURCES})

target_link_libraries(zelda zcsound ${ALLEGROLIB} ${IMAGELIBS} ${ZELDALIBSEXTRA})
if(MSVC AND USE_PCH)
	set_target_properties(zelda PROPERTIES COMPILE_FLAGS "/Yuprecompiled.h /FIprecompiled.h /Fp\"${ZCPrecompiledBinary}\"" OBJECT_DEPENDS "${ZCPrecompiledBinary}")
	target_compile_definitions(zelda PRIVATE ZC_PCH)
endif()

if(MSVC)
	list(APPEND ZQUESTEXTRASOURCES zq_icon.rc)
elseif(LINUX)
	list(ZQUESTEXTRASOURCES zq_icon.c src/single_instance_unix.cpp)
	set(ZQUESTLIBSEXTRA ${X11_LIBRARIES})
endif()

if(UNITY_BUILD)
	enable_unity_build(ZQCoreModule, ZQ_CORE_SOURCES)
	enable_unity_build(ZQGuiModule, ZQ_GUI_SOURCES)
	enable_unity_build(ZQMiscModule, ZQ_MISC_SOURCES)
	enable_unity_build(ZScriptModule, ZSCRIPTSOURCES)
endif()

add_executable(zquest ${ZQ_CORE_SOURCES} ${ZQ_GUI_SOURCES} ${ZQ_MISC_SOURCES} ${ZQUESTEXTRASOURCES} ${ZSCRIPTSOURCES} ${BISON_ZScriptParser_OUTPUTS} ${FLEX_ZScriptLexer_OUTPUTS})

target_link_libraries(zquest zcsound ${ALLEGROLIB} ${IMAGELIBS} ${ZQUESTLIBSEXTRA})
if(MSVC AND USE_PCH)
	set_target_properties(zquest PROPERTIES COMPILE_FLAGS "/Yuprecompiled.h /FIprecompiled.h /Fp\"${ZQPrecompiledBinary}\"" OBJECT_DEPENDS "${ZQPrecompiledBinary}")
	target_compile_definitions(zquest PRIVATE ZC_PCH)
endif()

if(MSVC)
	target_compile_definitions(zcsound PRIVATE ZCM_DLL)
	target_compile_definitions(zelda PRIVATE ZCM_DLL_IMPORT)
	target_compile_definitions(zquest PRIVATE ZCM_DLL_IMPORT)
endif()
